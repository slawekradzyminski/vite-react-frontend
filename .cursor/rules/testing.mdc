---
description: Testing patterns and conventions for unit tests (Vitest) and E2E tests (Playwright)
globs: **/*.test.tsx,**/*.test.ts,e2e/*.spec.ts
---

# Testing Patterns

### Testing Structure
Always follow the given/when/then pattern in test comments:

```typescript
// given - setup test data and conditions
// when - execute the action being tested
// then - verify the expected outcomes
```

### Unit Tests (Vitest)
- Co-locate test files with the components they test
- Use React Testing Library for component testing
- Mock external dependencies (axios, etc.)
- Test files should follow the naming pattern: `ComponentName.test.tsx`

Example structure:
```typescript
import { describe, it, expect } from 'vitest';

describe('ComponentName', () => {
  // given
  it('should render successfully', () => {
    // when
    render(<Component />);
    
    // then
    expect(screen.getByText('Expected text')).toBeInTheDocument();
  });
});
```

### E2E Tests (Playwright)
- Place all E2E tests in the `e2e/` directory
- Test complete user journeys
- Use page objects when possible
- Test against real backend service
- File naming pattern: `featureName.spec.ts`
- Application runs on port 8081 (http://localhost:8081)

### Playwright MCP Server
The MCP (Multi-Channel Protocol) server provides interactive capabilities for test development:
- Real-time interaction with running tests
- Visual debugging and element inspection
- Screenshot capture
- Form interaction testing
- Navigation testing

Requirements:
- Development server must be running on port 8081
- MCP server must be connected to Cursor
- Tests should be written using page object pattern

MCP Commands:
```typescript
// Navigation
await page.goto('http://localhost:8081/login');

// Screenshots
await page.screenshot({ path: 'screenshot.png' });

// Form interactions
await page.fill('#username', 'testuser');
await page.click('button[type="submit"]');

// Assertions
await expect(page).toHaveURL('/dashboard');
```

### Test Commands
Unit Tests:
```bash
npm run test        # Run once
npm run test:watch  # Watch mode
npm run test:ui     # UI mode
npm run test:coverage # Coverage report
```

E2E Tests:
```bash
npm run test:e2e     # Run e2e tests
npm run test:e2e:ai  # List reporter (AI friendly)
npm run test:e2e:ui  # UI mode
npm run test:e2e:debug # Debug mode
```
