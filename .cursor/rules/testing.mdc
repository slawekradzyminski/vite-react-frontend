---
description: Testing patterns and conventions for unit tests (Vitest) and E2E tests (Playwright)
globs: **/*.test.tsx,**/*.spec.ts
alwaysApply: false
---
# Testing Patterns

### Testing Structure
Always follow the given/when/then pattern in test comments:

```typescript
// given - setup test data and conditions
// when - execute the action being tested
// then - verify the expected outcomes
```

### Unit Tests (Vitest)
- Co-locate test files with the components they test
- Use React Testing Library for component testing
- Mock external dependencies (axios, etc.)
- Test files should follow the naming pattern: `ComponentName.test.tsx`

Example structure:
```typescript
import { describe, it, expect } from 'vitest';

describe('ComponentName', () => {
  // given
  it('should render successfully', () => {
    // when
    render(<Component />);
    
    // then
    expect(screen.getByText('Expected text')).toBeInTheDocument();
  });
});
```

### E2E Tests (Playwright)
- Place all E2E tests in the `e2e/` directory
- Use page objects for better maintainability and reusability
- Test complete user journeys
- Test against real backend service
- File naming pattern: `featureName.spec.ts`
- Application runs on port 8081 (http://localhost:8081)

### Page Object Pattern
- Create page objects in `e2e/pages/` directory
- Each page object should encapsulate:
  - Locators for UI elements
  - Common actions and interactions
  - Navigation methods
- Use meaningful names for methods and properties
- Keep selectors maintainable (prefer role-based or test-id based)

Example:
```typescript
export class LoginPage {
  constructor(protected readonly page: Page) {
    this.emailInput = page.getByLabel('Email');
    this.submitButton = page.getByRole('button', { name: 'Submit' });
  }

  async login(email: string, password: string) {
    await this.emailInput.fill(email);
    await this.submitButton.click();
  }
}
```

### Authentication in Tests
- Use `auth.fixture.ts` for tests requiring authenticated state
- Fixture provides:
  - Pre-authenticated page
  - User context
  - Helper methods

Example:
```typescript
import { test } from './fixtures/auth.fixture';

test('protected route', async ({ authenticatedPage }) => {
  const { page, user } = authenticatedPage;
  await page.goto('/protected');
});
```

### Test Commands
Unit Tests:
```bash
npm run test        # Run once
npm run test:watch  # Watch mode
npm run test:ui     # UI mode
npm run test:coverage # Coverage report
```

E2E Tests:
```bash
npm run test:e2e     # Run e2e tests
npm run test:e2e:ai  # List reporter (AI friendly)
npm run test:e2e:ui  # UI mode
npm run test:e2e:debug # Debug mode
```