---
description: Code style conventions and testing procedures for this project
globs: src/**/*.css,src/**/*.tsx,src/**/*.ts,**/*.test.ts,**/*.test.tsx
alwaysApply: false
---

# Code Style Conventions

## CSS Styling
The project uses CSS modules for component-specific styles following the BEM naming convention. Component styling is kept in separate `.css` files rather than using inline Tailwind classes. Inline styles are used only when necessary for dynamic values.

Files: 
- `src/components/**/*.css` - Component-specific styles
- `src/styles/` - Global styles and variables

## JavaScript/TypeScript Conventions
The project employs modern ES6+ syntax with import/export statements. TypeScript types are centralized in the `/types` folder for better organization and reuse. Code organization prioritizes readability and maintainability.

Files:
- `types/` - Shared TypeScript interfaces and types
- `src/lib/utils.ts` - Common utility functions

## Testing Approach
Test files follow the given/when/then pattern in comments for clarity and consistency. This structure helps clearly separate test setup, actions, and assertions.

Testing infrastructure:
- `package.json` - Contains test commands and dependencies
- `vitest.config.ts` - Vitest configuration
- `playwright.config.ts` - Playwright E2E test configuration

## Backend Monitoring and Debugging
The project includes Docker-based services for the backend. Container logs provide valuable information about request/response details and error messages. The OpenAPI documentation offers comprehensive API reference.

Backend resources:
- OpenAPI documentation at `http://localhost:4001/v3/api-docs`
- Swagger UI for interactive API testing
- `docker-compose.yml` - Container configuration

## Testing Commands
The following commands are available for testing the application:
```bash
npm test            # Run unit tests
npm run test:e2e:ai # Run E2E tests with AI-friendly output
```

## Change Validation Process
Before completing tasks, it's important to validate changes through the test suite. If tests fail, analyzing error messages helps identify and fix issues. The backend container logs (`docker logs <container-id>`) provide additional context for API-related failures. 